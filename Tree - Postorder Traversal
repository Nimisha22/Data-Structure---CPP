Following are the generally used ways for traversing trees.
                            
                            1
                      2           3
                   4     5

Example Tree

Depth First Traversals: 
(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1
Breadth First or Level Order Traversal : 1 2 3 4 5 


---------------------------------------------------------------

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> postOrder;
        if (root == NULL)
            return postOrder;
        stack<TreeNode*> stack;
        stack.push(root);
        while(!stack.empty()) {
            TreeNode* curr = stack.top();
            stack.pop();
            postOrder.insert(postOrder.begin(), curr->val);
            if (curr->left != NULL)
                stack.push(curr->left);
            if (curr->right != NULL)
                stack.push(curr->right);
        }
        return postOrder;
    }
};

-------------------------------------------------------------

#include <bits/stdc++.h>

using namespace std;
 
// A tree node
struct Node {
    int data;
    Node *left, *right;
};
 
Node* newNode(int data) {
    Node* node = new Node;
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// An iterative function to do post order
// traversal of a given binary tree

void postOrderIterative(Node* root) {
    if (root == NULL)
        return;

    // Create two stacks
    stack<Node *> s1, s2;
    
    // push root to first stack
    s1.push(root);
    Node* node;
 
    // Run while first stack is not empty
    while (!s1.empty()) {
        // Pop an item from s1 and push it to s2
        node = s1.top();
        s1.pop();
        s2.push(node);
 
        // Push left and right children
        // of removed item to s1
        if (node->left)
            s1.push(node->left);
        if (node->right)
            s1.push(node->right);
    }
 

    // Print all elements of second stack
    while (!s2.empty()) {
        node = s2.top();
        s2.pop();
        cout << node->data << " ";
    }
}
 

int main() {
    Node* root = NULL;
    root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    postOrderIterative(root);
    return 0;
}

-----------------------------------------------------------

// one stack
#include <stdio.h>
#include <stdlib.h>

// Maximum stack size
#define MAX_SIZE 100

struct Node {
	int data;
	struct Node *left, *right;
};

// Stack type
struct Stack {
	int size;
	int top;
	struct Node* *array;
};


struct Node* newNode(int data) {
	struct Node* node = (struct Node*) malloc(sizeof(struct Node));
	node->data = data;
	node->left = node->right = NULL;
	return node;
}

// A utility function to create a stack of given size
struct Stack* createStack(int size) {
	struct Stack* stack = (struct Stack*) malloc(sizeof(struct Stack));
	stack->size = size;
	stack->top = -1;
	stack->array = (struct Node**) malloc(stack->size * sizeof(struct Node*));
	return stack;
}

// BASIC OPERATIONS OF STACK
int isFull(struct Stack* stack) { 
  return stack->top - 1 == stack->size; 
}

int isEmpty(struct Stack* stack) { 
  return stack->top == -1; 
}

void push(struct Stack* stack, struct Node* node) {
	if (isFull(stack))
		return;
	stack->array[++stack->top] = node;
}

struct Node* pop(struct Stack* stack) {
	if (isEmpty(stack))
		return NULL;
	return stack->array[stack->top--];
}

struct Node* peek(struct Stack* stack) {
	if (isEmpty(stack))
		return NULL;
	return stack->array[stack->top];
}


void postOrderIterative(struct Node* root) {
	// Check for empty tree
	if (root == NULL)
		return;
	
	struct Stack* stack = createStack(MAX_SIZE);
	do {
		// Move to leftmost node
		while (root) {
			// Push root's right child and then root to stack.
			if (root->right)
				push(stack, root->right);
			push(stack, root);

			// Set root as root's left child
			root = root->left;
		}

		// Pop an item from stack and set it as root	
		root = pop(stack);

		// If the popped item has a right child and the right child is not
		// processed yet, then make sure right child is processed before root
		if (root->right && peek(stack) == root->right) {
			pop(stack); // remove right child from stack
			push(stack, root); // push root back to stack
			root = root->right; // change root so that the right
								// child is processed next
		}
		else // Else print root's data and set root as NULL
		{
			printf("%d ", root->data);
			root = NULL;
		}
	} while (!isEmpty(stack));
}


int main() {
	struct Node* root = NULL;
	root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	root->right->left = newNode(6);
	root->right->right = newNode(7);
	printf("Post order traversal of binary tree is :\n");
	printf("[");
	postOrderIterative(root);
	printf("]");

	return 0;
}


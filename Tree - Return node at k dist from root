Problem Statement 
Implement a function string findKNodes(Node* root, int k) , which finds and returns nodes at 
k distance from the root in the given binary tree.

Output 
Returns all nodes in a stringed list format which are at k distance from the root node.

Sample Input 
bst = {
        6 -> 4,9
    4 -> 2,5
    9 -> 8,12
    12 -> 10,14
}
where parent -> leftChild,rightChild
k = 2

Sample Output 
2,5,8,12,

---------------------------------------------------------
Code

#include "BST.h"
#include <string>
#include <queue>

//Helper recursive function to traverse tree and append all the nodes
// at k distance into result string
void findK(Node* root, int k, string* result) {
    if(root == nullptr) {
        return;
    }
    queue <Node *> levelOrderQueue;
    levelOrderQueue.push(root);
    int distanceFromRoot = 0;
    while(!levelOrderQueue.empty() && distanceFromRoot <= k) {
        int levelSize = levelOrderQueue.size();
        for(int i = 0; i < levelSize; i++) {
            Node *currentNode = levelOrderQueue.front();
            levelOrderQueue.pop();
            if(currentNode->leftChild != nullptr) {
                levelOrderQueue.push(currentNode->leftChild);
            }
            if(currentNode->rightChild != nullptr) {
                levelOrderQueue.push(currentNode->rightChild);
            }
            if(distanceFromRoot == k) {
                *result = *result + to_string(currentNode->value) + ", " ;
            }
        }
        distanceFromRoot++; 
    }
    return;
}

string findKNodes(Node* root, int k) {
    string *result = new string("");
    findK(root, k, result);
    return *result;
}


int main() {

    BinarySearchTree BST(6);
    BST.insertBST(4);
    BST.insertBST(9);
    BST.insertBST(5);
    BST.insertBST(2);
    BST.insertBST(8);
    BST.insertBST(12);

    cout << findKNodes(BST.getRoot(),2) << endl;

}

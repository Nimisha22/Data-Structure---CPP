Examples: 
 
Input: k = 3 
      arr[][] = { {1, 3},
                  {2, 4, 6},
                  {0, 9, 10, 11}} ;
Output: 0 1 2 3 4 6 9 10 11 

Input: k = 2
      arr[][] = { {1, 3, 20},
                  {2, 4, 6}} ;
Output: 1 2 3 4 6 20 

-----------------------------------

A simple solution is to create an output array and and one by one copy all arrays to it. 
Finally, sort the output array using. This approach takes O(N Logn N) time where N is count of all elements.
An efficient solution is to use heap data structure. The time complexity of heap based solution is O(N Log k).
1. Create an output array. 
2. Create a min heap of size k and insert 1st element in all the arrays into the heap 
3. Repeat following steps while priority queue is not empty. 
…..a) Remove minimum element from heap (minimum is always at root) and store it in output array. 
…..b) Insert next element from the array from which the element is extracted. 
If the array doesn’t have any more elements, then do nothing.

// C++ program to merge k sorted arrays
// of size n each.
#include <bits/stdc++.h>
using namespace std;

// A pair of pairs, first element is going to
// store value, second element index of array
// and third element index in the array.
typedef pair<int, pair<int, int> > ppi;

// This function takes an array of arrays as an
// argument and all arrays are assumed to be
// sorted. It merges them together and prints
// the final sorted output.
vector<int> mergeKArrays(vector<vector<int> > arr) {
	vector<int> output;

	// Create a min heap with k heap nodes. Every
	// heap node has first element of an array
	priority_queue<ppi, vector<ppi>, greater<ppi> > pq;

	for (int i = 0; i < arr.size(); i++)
		pq.push({ arr[i][0], { i, 0 } });

	// Now one by one get the minimum element
	// from min heap and replace it with next
	// element of its array
	while (pq.empty() == false) {
		ppi curr = pq.top();
		pq.pop();

		// i ==> Array Number
		// j ==> Index in the array number
		int i = curr.second.first;
		int j = curr.second.second;

		output.push_back(curr.first);

		// The next element belongs to same array as
		// current.
		if (j + 1 < arr[i].size())
			pq.push({ arr[i][j + 1], { i, j + 1 } });
	}

	return output;
}


int main() {
	// Change n at the top to change number
	// of elements in an array
	vector<vector<int> > arr{ { 2, 6, 12 },
							{ 1, 9 },
							{ 23, 34, 90, 2000 } };

	vector<int> output = mergeKArrays(arr);

	cout << "Merged array is " << endl;
	for (auto x : output)
		cout << x << " ";

	return 0;
}

-----------------------------------------------------------------------------------------------------------

Input: 
k = 3, n = 4 
arr[][] = { {1, 3, 5, 7}, 
{2, 4, 6, 8}, 
{0, 9, 10, 11}} ;
Output: 0 1 2 3 4 5 6 7 8 9 10 11 
Explanation: The output array is a sorted array that contains all the elements of the input matrix. 

Input: 
k = 3, n = 4 
arr[][] = { {1, 5, 6, 8}, 
{2, 4, 10, 12}, 
{3, 7, 9, 11}, 
{13, 14, 15, 16}} ;
Output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
Explanation: The output array is a sorted array that contains all the elements of the input matrix. 

Algorithm: 
Create a min Heap and insert the first element of all k arrays.
Run a loop until the size of MinHeap is greater than zero.
Remove the top element of the MinHeap and print the element.
Now insert the next element from the same array in which the removed element belonged.
If the array doesn’t have any more elements, then replace root with infinite.After replacing the root, heapify the tree.

-------------
// C++ program to merge k sorted
// arrays of size n each.
#include<bits/stdc++.h>
using namespace std;

#define n 4

// A min-heap node
struct MinHeapNode
{
// The element to be stored
	int element;

// index of the array from which the element is taken
	int i;

// index of the next element to be picked from the array
	int j;
};

// Prototype of a utility function to swap two min-heap nodes
void swap(MinHeapNode *x, MinHeapNode *y);

// A class for Min Heap
class MinHeap
{

// pointer to array of elements in heap
	MinHeapNode *harr;

// size of min heap
	int heap_size;
public:
	// Constructor: creates a min heap of given size
	MinHeap(MinHeapNode a[], int size);

	// to heapify a subtree with root at given index
	void MinHeapify(int );

	// to get index of left child of node at index i
	int left(int i) { return (2*i + 1); }

	// to get index of right child of node at index i
	int right(int i) { return (2*i + 2); }

	// to get the root
	MinHeapNode getMin() { return harr[0]; }

	// to replace root with new node x and heapify() new root
	void replaceMin(MinHeapNode x) { harr[0] = x; MinHeapify(0); }
};

// This function takes an array of arrays as an argument and
// All arrays are assumed to be sorted. It merges them together
// and prints the final sorted output.
int *mergeKArrays(int arr[][n], int k)
{

// To store output array
	int *output = new int[n*k];

	// Create a min heap with k heap nodes.
	// Every heap node has first element of an array
	MinHeapNode *harr = new MinHeapNode[k];
	for (int i = 0; i < k; i++)
	{

// Store the first element
		harr[i].element = arr[i][0];

// index of array
		harr[i].i = i;

// Index of next element to be stored from the array
		harr[i].j = 1;
	}

// Create the heap
	MinHeap hp(harr, k);

	// Now one by one get the minimum element from min
	// heap and replace it with next element of its array
	for (int count = 0; count < n*k; count++)
	{
		// Get the minimum element and store it in output
		MinHeapNode root = hp.getMin();
		output[count] = root.element;

		// Find the next elelement that will replace current
		// root of heap. The next element belongs to same
		// array as the current root.
		if (root.j < n)
		{
			root.element = arr[root.i][root.j];
			root.j += 1;
		}
		// If root was the last element of its array
// INT_MAX is for infinite	
else root.element = INT_MAX;

		// Replace root with next element of array
		hp.replaceMin(root);
	}

	return output;
}

// FOLLOWING ARE IMPLEMENTATIONS OF
// STANDARD MIN HEAP METHODS FROM CORMEN BOOK
// Constructor: Builds a heap from a given
// array a[] of given size
MinHeap::MinHeap(MinHeapNode a[], int size)
{
	heap_size = size;
	harr = a; // store address of array
	int i = (heap_size - 1)/2;
	while (i >= 0)
	{
		MinHeapify(i);
		i--;
	}
}

// A recursive method to heapify a
// subtree with root at given index.
// This method assumes that the subtrees
// are already heapified
void MinHeap::MinHeapify(int i)
{
	int l = left(i);
	int r = right(i);
	int smallest = i;
	if (l < heap_size && harr[l].element < harr[i].element)
		smallest = l;
	if (r < heap_size && harr[r].element < harr[smallest].element)
		smallest = r;
	if (smallest != i)
	{
		swap(&harr[i], &harr[smallest]);
		MinHeapify(smallest);
	}
}

// A utility function to swap two elements
void swap(MinHeapNode *x, MinHeapNode *y)
{
	MinHeapNode temp = *x; *x = *y; *y = temp;
}

// A utility function to print array elements
void printArray(int arr[], int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}


int main() {
	// Change n at the top to change number of elements
	// in an array
	int arr[][n] = {{2, 6, 12, 34},
					{1, 9, 20, 1000},
					{23, 34, 90, 2000}};
	int k = sizeof(arr)/sizeof(arr[0]);

	int *output = mergeKArrays(arr, k);

	cout << "Merged array is " << endl;
	printArray(output, n*k);

	return 0;
}

-----------

Output: 
Merged array is 
1 2 6 9 12 20 23 34 34 90 1000 2000
 

Complexity Analysis:  

Time Complexity :O( n * k * log k), Insertion and deletion in a Min Heap requires log k time. So the Overall time compelxity is O( n * k * log k)
Space Complexity :O(k), If Output is not stored then the only space required is the Min-Heap of k elements. So space Comeplexity is O(k).


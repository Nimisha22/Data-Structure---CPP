Implement the Delete functionality. In this function, we will pass a particular value that we want to delete from the list. 
The node containing this value could be anywhere on the list. It is also possible that such a node may not exist at all.
Therefore, we would have to traverse the whole list until we find the value which needs to be deleted. 
If the value doesnâ€™t exist, we do not need to do anything.

Input 
A value to be deleted.

Output 
true if the value is deleted, false otherwise.

Sample Input 
1->2->3->4->5
4

Sample Output 
true


-------------------------------------------------------
Code

#include "LinkedList.h"
#include <iostream>
using namespace std;

bool LinkedList::Delete(int value) {
    Node *ptr, *pptr, *current;
    ptr = head;
    int position = 1, total_nodes = 0;
    bool found = false;
    
   while(current != NULL) {
       current = current->nextElement;
       total_nodes++;
   }
   
   current = head;
   while(current != NULL) {
       if (current->data == value) {
           found = true;
           break;
       }
       position++;
       current = current->nextElement;
   }
   
   cout << total_nodes << " " << position << endl;
   
   if (found == 1) {
       if(position == 1) {
           head = head->nextElement;
       }
       else if (position == total_nodes) {
           while (ptr->nextElement != NULL) {
               pptr = ptr;
               ptr = ptr -> nextElement;
           }
           pptr->nextElement = NULL;
       }
       else {
           int count = 1;
           while(ptr->nextElement != NULL) {
               if(position != count) {
                   pptr = ptr;
                   ptr = ptr->nextElement;
                   count++;
               }
               else{
                   pptr->nextElement = ptr->nextElement;
                   break;
               }
           }
       }
   }
    return found;
}



int main() {

  LinkedList list;
    list.insertAtTail(1);
    list.insertAtTail(2);
    list.insertAtTail(3);
    list.insertAtTail(4);
    list.insertAtTail(5);
    bool found = list.Delete(4);
    if (found)
    cout<<"true"<<endl;
    else
    cout<<"false"<<endl;
  return 0;
}

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:
1   3   1
1   5   1
4   2   1

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

-----------------------------------------

class Solution {
public: //bottom up approch
    int minPathSum(vector<vector<int>>& grid) {
    int row = grid.size();
    int col = grid[0].size();
    int dp[row][col];
    
    for(int i = row - 1; i >= 0; i--){
        for(int j = col - 1 ; j >= 0 ; j--){
        
            // At end cell
            if(i == row - 1 and j == col - 1) {       
                dp[i][j] = grid[i][j];
            }
            
            // At last row
            else if(i == row - 1){  
                dp[i][j] = grid[i][j] + dp[i][j + 1];// we can go only right 
            }
            
             // At last column
            else if(j == col - 1){    
                dp[i][j] = grid[i][j] + dp[i + 1][j];  // we can move only down
            }
            
            //remaining cells
            else{  
                dp[i][j] = grid[i][j] + min(dp[i + 1][j], dp[i][j + 1]);
                // get the min of right and down cell;
            }
            
        }
    }
    return dp[0][0];
}

};

Problem Statement 
Implement a function convertMax(vector<int> maxHeap), which will convert a binary Max-Heap into a binary Min-Heap.
Where maxHeap is a vector which is given in the maxHeap form, i.e., the parent is greater than its children.

Output 
Returns converted list in string format

Sample Input 
7 // size of the vector

9
4
7
1
-2
6
5



Sample Output 
"-2,1,5,9,4,6,7"

------------------------------------------------------
Code

#include <iostream>
#include <vector>
#include <string.h>
using namespace std;

void swap(vector<int> &array, int firstIndex, int secondIndex) {
    int temp = array[firstIndex];
    array[firstIndex] = array[secondIndex];
    array[secondIndex] = temp;
    return;
}

void minHeapify(vector<int> &minHeap, int i) {
    if (2*i + 1 >= minHeap.size()) {
        return;
    }
    int minElement = i;
    if(minHeap[minElement] > minHeap[2*i + 1]){
        minElement = 2*i + 1;
    }
    if((2*i + 2 < minHeap.size())&& minHeap[minElement] > minHeap[2*i + 2]){        minElement = 2*i + 1;
        minElement = 2*i + 2;
    }
    if (i != minElement){
        swap(minHeap, minElement, i);
        minHeapify(minHeap, minElement);
    }
    return;
}

string convertMax(vector<int> &maxHeap) {
    int length = maxHeap.size();
    for (int i = length/2; i >= 0; i--) {
        minHeapify(maxHeap, i);
    }
  string result = "";
  for (int element : maxHeap) {
      result = result + to_string(element) + ",";
  }
  result.pop_back();
  return result;

}


int main() {
  int n;
  cin >> n;
  vector<int> maxHeap;
  while (n-->0) {
      int element; 
      cin >> element;
      maxHeap.push_back(element);
  }
  cout << convertMax(maxHeap);
  return 1;
}

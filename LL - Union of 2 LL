#include <iostream>
#include <unordered_set>

using namespace std;

struct Node {
    int data;
    struct Node *next;
};


void push(struct Node **head, int value) {
    struct Node *new_node = new Node;
    new_node->data = value;
    new_node->next = *head;
    *head = new_node;
}


bool isPresent(struct Node* head, int data) {
    struct Node* temp = head;
    while(temp != NULL) {
        if(temp->data == data)
           return 1;
        temp = temp-> next;
    }
    return 0;
}


struct Node* removeDuplicates(struct Node *start) { 
    unordered_set<int> seen; 
  
    struct Node *curr = start; 
    struct Node *prev = NULL; 
    while (curr != NULL) { 
        // If current value is seen before 
        if (seen.find(curr->data) != seen.end()) { 
           prev->next = curr->next; 
           delete (curr); 
        } else { 
           seen.insert(curr->data); 
           prev = curr; 
        } 
        curr = prev->next; 
    } 
    
    return start;
} 


struct Node* getUnion(struct Node* head1, struct Node* head2) {
    struct Node* ans = NULL, *temp1 = head1, *temp2 = head2;
    struct Node* answer = NULL;
    while(temp1 != NULL) {
        push(&ans, temp1->data);
        temp1 = temp1->next;
    }
    
    while(temp2 != NULL) {
        if(!isPresent(ans, temp2->data))
            push(&ans, temp2->data);
        temp2 = temp2->next;
    }
    answer = removeDuplicates(ans);
    return answer;
}



void printList(struct Node* node) {
    while(node != NULL) {
        cout << node->data << "->";
        node = node->next;
    }
    cout << "null";
}


int main() {
    struct Node* head1 = NULL;
    struct Node* head2 = NULL;
    struct Node* union_list = NULL;
    
    push(&head1, 1);
    push(&head1, 2);
    push(&head1, 1);
    push(&head1, 3);
    
    push(&head2, 1);
    push(&head2, 5);
    push(&head2, 6);
    push(&head2, 7);
    
    union_list = getUnion(head1, head2);
    
    
    cout << "Union List:" << endl;
    printList(union_list);
    
    return 0;
}

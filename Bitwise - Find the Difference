You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"

Example 3:
Input: s = "a", t = "aa"
Output: "a"

Example 4:
Input: s = "ae", t = "aea"
Output: "a"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lower-case English letters.

---------------------------------------------------

class Solution {
public:
    char findTheDifference(string s, string t) {
        string sum= s+t;int ans=0;
        for(int i=0;i<sum.length();i++){
            ans^=sum[i];
        }
        return ans;
    }
};

Idea
If we XOR one charecter twice it becomes zero . ( A^A==0) .
We took this idea. In the problem, we see one charecter added at any position after suffling our main string.

So, we can add two string (s,t). then iterate the whole string and find out the XOR of the element. 
The XOR of the whole string(s+t) is our answer. cause same elements returns 0 (A^A==0) .
So, the element which appears once,that Remains in our XOR sum. Just return it.

-----------------------------------------------------------

using map

char findTheDifference(string s, string t) {
     unordered_map<char,int>m;
        for(int i=0;i<t.size();i++)
            m[t[i]]++;
        for(int i=0;i<s.size();i++)
            m[s[i]]--;
      for(auto it:m){
          if(it.second==1)
              return it.first;
}
return ' ';
    }

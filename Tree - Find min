Problem Statement 
Implement the int findMin(Node* rootNode) function, which will find the minimum value in a given Binary Search Tree. 
Remember, a Binary Search Tree is a Binary Tree that satisfies the following property. 

NodeValues(LeftSubtree)<=CurrentNodeValue<NodeValues(RightSubTree)

Output 
Returns minimum integer value from a given binary search tree

Sample Input 
The root of an object of the BST class which contains data such as.
bst = {
    6 -> 4,9
    4 -> 2,5
    9 -> 8,12
    12 -> 10,14
}
where parent -> leftChild,rightChild

Sample Output 
2

----------------------------------------------------------------------
Code

#include "BST.h"

int findMin(Node * rootNode) {
    //cout << rootNode->value << endl;
    if(rootNode == nullptr)
       return -1;
       
    Node *currentNode = rootNode;   
    while (currentNode->leftChild != nullptr) {
        currentNode = currentNode->leftChild;
    }
    return currentNode->value;
    
}

int main() {
  BinarySearchTree bsT(6);
  bsT.insertBST(3);
  bsT.insertBST(8);
  bsT.insertBST(12);
  bsT.insertBST(10);
  bsT.insertBST(14);
  cout << findMin(bsT.getRoot()) << endl;
  return 0;
}

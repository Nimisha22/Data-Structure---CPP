Problem Statement 
Implement a function rightRotate(int arr[], int size) which takes an array arr and rotate it right by 1. This means that the right-most elements will appear at the left-most position in the array.

Input 
An array of integers and its size

Output: 
The given array rotated by 1

Sample Input 
[1,2,3,4,5]

Sample Output 
[5,1,2,3,4]

---------------------------------------------------

Code

// Time: O(n*d)  Space: O(1)
#include<bits/stdc++.h> 
using namespace std;

void rotateArray(int arr[], int size) {
  int temp = temp = arr[size - 1], i;
  for(i = size - 1; i > 0; i--) {
      arr[i] = arr[i - 1];
  }
  arr[i] = temp;
}



int main(){
  int size = 6;
  int arr[size] = {3, 6, 1, 8, 4, 2};
  cout << "Array before rotation: ";
  for(int i = 0; i < size; i++){
    cout << arr[i] << " ";
  }
  cout << endl;
  
  rotateArray(arr, size);
  
  cout << "Array after rotation: ";
  for(int i = 0; i < size; i++){
    cout << arr[i] << " ";
  }
  cout << endl;
}

--------------------------------------------
// Reversal Algo - Time: O(n) Space: O(1)

class Solution {
public:
    void reverse(vector<int>& nums,int start,int end)
    {
        while(start<=end)
            swap(nums[start++],nums[end--]);
    }
    
    void rotate(vector<int>& nums, int k) {
        k = k % nums.size();
		//reverse first partion
        reverse(nums, 0, nums.size() - k - 1);
		//rverse last partiton
        reverse(nums, nums.size() - k, nums.size() - 1);
		//reverse the whole vector
        reverse(nums, 0, nums.size() - 1);
    }
};

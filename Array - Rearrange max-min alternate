Problem Statement 
Implement a function maxMin(int arr[], int size) which takes a sorted array arr and its size and will re-arrange the elements of a sorted array such that the first position will have the largest number, the second will have the smallest, and the third will have the second-largest and so on. In other words, all the even-numbered indices will have the largest numbers in the array in descending order and the odd-numbered indices will have the smallest numbers in ascending order.
The given array is sorted in ascending order.

Input: 
A sorted array and its size

Output: 
A list with elements stored in max/min form

Sample Input 
[1,2,3,4,5]

Sample Output 
[5,1,4,2,3]

----------------------------------------------------------
Code

#include <bits/stdc++.h> 
using namespace std; 
  
void maxMin(int arr[], int n)  {
    int temp[n]; 
    int small = 0, large = n - 1; 
    int flag = true; 
  

    for (int i = 0; i < n; i++) { 
        if (flag) 
            temp[i] = arr[large--]; 
        else
            temp[i] = arr[small++]; 
  
        flag = !flag; 
    } 
 
    for (int i=0; i<n; i++) 
        arr[i] = temp[i]; 
}


int main() {
  int size = 6;
  int arr[size] = {1, 2, 3, 4, 5, 6};
  cout << "Array before min/max: ";
  for (int i = 0; i < size; i++) 
    cout << arr[i] << " ";
  cout << endl;
  
  maxMin(arr,size);
  
  cout << "Array after min/max: ";
  for (int i = 0; i < size; i++) 
    cout << arr[i] << " ";
  cout << endl;
}

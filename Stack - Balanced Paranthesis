Problem Statement 
In this problem, you have to implement the isBalanced() function which will take a string containing only curly {}, square [], and round () parentheses. 
The function will tell us whether all the parentheses in the string are balanced or not.

For all the parentheses to be balanced, every opening parenthesis must have a closing one. 
The order in which they appear also matters. For example, {[]} is balanced, but {[}] is not.

Input 
A string consisting solely of (, ), {, }, [, and ]

Output 
Returns false if the expression doesnâ€™t have balanced parentheses. If it does, the function returns true.

Sample Input 
"{[({})]}"

Sample Output 
True

----------------------------------------------------------------------------------------------
Code 

#include <bits/stdc++.h> 
using namespace std; 


bool areParanthesisBalanced(string expr) { 
	stack<char> s; 
	char x; 

	for (int i = 0; i < expr.length(); i++) { 
		if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{') { 
			s.push(expr[i]); 
			continue; 
		} 

		if (s.empty()) 
			return false; 

		switch (expr[i]) { 
		case ')': 
			x = s.top(); 
			s.pop(); 
			if (x == '{' || x == '[') 
				return false; 
			break; 

		case '}':
			x = s.top(); 
			s.pop(); 
			if (x == '(' || x == '[') 
				return false; 
			break; 

		case ']': 
			x = s.top(); 
			s.pop(); 
			if (x == '(' || x == '{') 
				return false; 
			break; 
		} 
	} 

	return (s.empty()); 
} 


int main() { 
	 cout << areParanthesisBalanced("{[()]}");
   cout << areParanthesisBalanced("[{(}]");
	 return 0; 
}

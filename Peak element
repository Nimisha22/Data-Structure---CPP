A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. 
If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.


Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, 
or index number 5 where the peak element is 6.
 

Constraints:
1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.

--------------------------------------------------------------------------

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int low = 0, high = nums.size() - 1, mid;
        
        while (low < high) {
            mid = low + (high - low) / 2;
            if (nums[mid] < nums[mid + 1]) 
                low = mid + 1;
            else 
                high = mid;
        }
        
        return lo;
    }
};

Runtime: 0 ms, faster than 100.00% of C++ online submissions for Find Peak Element.
Memory Usage: 8.9 MB, less than 6.28% of C++ online submissions for Find Peak Element.

binary search works for this problem. Look at mid. 
If nums[mid] < nums[mid+1], then there has to be a peak element in the right side of mid.
Either the numbers increase until we reach the end and then the last element will be a peak, 
or at some point a number gets smaller and right there we will have a peak.
Same for the left side of mid.

Dry Run:
                                                  0 < 3               2 < 3
            mid = lo + (hi - lo) / 2;             mid = 0 + 1 = 1      mid = 2 + 0
            if (nums[mid] < nums[mid + 1])        2 < 3 lo = 2         3 < 1  hi = 2
                lo = mid + 1;

Problem Statement 
Implement the following functions to implement two stacks using a single array to store elements. You can make changes to the constructor as well.

Function Prototypes 
void push1(int value):
void push2(int value):
void pop1():
void pop2():

Input/Output 

push1(value) : Input - an integer
               Output - inserts the given value in the first stack, i.e., stack1

push2(value) : Input - an integer
               Output - inserts the given value in the second stack, i.e., stack2

pop1() : Output - returns and removes the top value of stack1

pop2() : Output - returns and removes the top value of stack2

-----------------------------------------------------------------------------------------------------
Code - 
#include <iostream>
using namespace std;

class twoStacks {

private:
    int size;
    int *arr;
    int top1, top2;
   
public:
    twoStacks(int n) {
        size = n;
        arr = new int[size];
        top1 = -1;
        top2 = size;
    }
 
    void push1(int value) {
      top1++;
      arr[top1] = value;
    }
 
    void push2(int value) {
        top2--;
      arr[top2] = value;
      
    }

    int pop1() {
        if (top1 == -1)
        return -1;
        int item = arr[top1];
        top1--;
        return item;
        
    }

    int pop2() {
      if (top2 == size)
        return -1;
        int item = arr[top2];
        top2++;
        return item;
       
    }
};

// top1 from strarting and top2 from end

int main(){
  
   twoStacks tS(5);
    tS.push1(11);
    tS.push1(3);
    tS.push1(7);
    tS.push2(1);
    tS.push2(9);
  
  cout << tS.pop1() << endl;
  cout << tS.pop2() << endl;
  cout << tS.pop2() << endl;
  cout << tS.pop2() << endl;
  cout << tS.pop1() << endl;

  return 0; 
}


----------------------------------------------------------------------

Output - 
7
9
1
-1
3
